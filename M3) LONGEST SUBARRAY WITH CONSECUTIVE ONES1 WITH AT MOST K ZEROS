BFA-                                                                              TC=O(N2) SC=O(1)
                                                                                  TC=O(2N) SC=O(1)
                                                                                  TC=O(N) SC=O(1)
int longestOnes(vector<int>& nums, int k) {
        int maxlen=0;
        for(int i=0;i<nums.size();i++){
           int c=0;
           int j=i;
            for(j;j<nums.size();j++){
                if(nums[j]==0){
                    if(c>=k){
                        j=nums.size();
                        continue;
                    }else{
                        c++;
                    }
                }
                maxlen=max(maxlen,j-i+1);
            }
        }
        return maxlen;
    }
};

BETTER-
  int longestOnes(vector<int>& nums, int k) {
        int c=0;
        int maxlen=0;
        int l=0;
        int r=0;
        while(r<nums.size()){
            if(nums[r]==0){
                c++;
            }
            while(c>k){
                if(nums[l]==0){
                    c--;
                }
                l++;
            }
            maxlen=max(maxlen,r-l+1);
            r++;
        }
        return maxlen;
    }
OPTIMAL-
int longestOnes(vector<int>& nums, int k) {
        int ws=0;
        int maxlen=0;
        int l=0;
        int r=0;
        while(r<nums.size()){
            if(nums[r]==0){
                ws++;
            }
            if(ws>k){
                if(nums[l]==0){
                    ws--;
                }
                l++;
            }else{
                maxlen=max(maxlen,r-l+1);
                
            }
            r++;
        }
        return maxlen;
    }
