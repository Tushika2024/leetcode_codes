BRUTE- USING SET DS TC=O(NLOGN+N)  SC=O(N0)
OPTIMAL- TC=MERGE*O(N NEXT)  MERGE=O(M+M)  SC=O(N) DUE TO RECURSION
   Node *merge(Node *headA,Node *headB){
        Node *dnode=new Node(-1);
        Node *curr=dnode;
        Node *tempa=headA;
        Node *tempb=headB;
        while(tempa!=NULL && tempb!=NULL){
            if(tempa->data<tempb->data){
                curr->bottom=tempa;
                curr=tempa;
                tempa=tempa->bottom;
            }
            else{
                curr->bottom=tempb;
                curr=tempb;
                tempb=tempb->bottom;
            }
        }
        while(tempa!=NULL){
                curr->bottom=tempa;
                curr=tempa;
                tempa=tempa->bottom;
        }
        while(tempb!=NULL){
                curr->bottom=tempb;
                curr=tempb;
                tempb=tempb->bottom;
        }
        return dnode->bottom;
    }
    Node *flatten(Node *root) {
        // Your code here
        if(root== NULL || root->next==NULL){
            return root;
        }
        Node *mergehead=flatten(root->next);
        return merge(mergehead,root);
        
    }
