BFA-
int singleNonDuplicate(vector<int>& nums) {
        int ans=0;
        for(int i=0;i<nums.size();i++){
            ans=ans^nums[i];
        }
        return ans;
    }
  MY OP-
  int singleNonDuplicate(vector<int>& nums) {
        int start=0;
        int end=nums.size()-1;
        while(start<=end){
            int mid=start+((end-start)/2);
            if(mid ==0 || mid==nums.size()-1){
                return nums[end];
            }
            if(nums[mid]!=nums[mid-1] && nums[mid]!=nums[mid+1]){
                return nums[mid];
            }else{
                int ls=mid-start;
                int rs=end-mid;
                if(ls%2==0){
                    if(nums[mid]==nums[mid+1]){
                        start=mid+2;
                    }else{
                        end=mid-2;
                    }
                }else{
                    if(nums[mid]==nums[mid+1]){
                        end=mid-1;
                    }else{
                        start=mid+1;
                    }
                }
            }
        }
        return -1;
    }
