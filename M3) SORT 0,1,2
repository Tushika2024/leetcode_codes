BRUTE- TC=O(2N) SC=O(1)
Node* segregate(Node* head) {
        // code here
        int zero=0;
        int one=0;
        int two=0;
        Node *temp=head;
        while(temp!=NULL){
            if(temp->data==0) zero++;
            else if(temp->data==1) one++;
            else two++;
            temp=temp->next;
        }
        Node *temp1=head;
        while(temp1!=NULL){
            if(zero!=0){
                temp1->data=0;
                zero--;
            }else if(one!=0){
                temp1->data=1;
                one--;
            }else{
                temp1->data=2;
                two--;
            }
            temp1=temp1->next;
        }
        return head;
    }

OPTIMAL- TC=O(N) SC=O(1)
  Node* segregate(Node* head) {
        // code here
        if(head==NULL || head->next==NULL) return head;
        Node *d0=new Node(-1);
        Node *curr0=d0;
        Node *d1=new Node(-1);
        Node *curr1=d1;
        Node *d2=new Node(-1);
        Node *curr2=d2;
        Node *temp=head;
        while(temp!=NULL){
            if(temp->data==0){
                curr0->next=temp;
                curr0=temp;
            }else if(temp->data==1){
                curr1->next=temp;
                curr1=temp;
            }else{
                curr2->next=temp;
                curr2=temp;
            }
            temp=temp->next;
        }
        curr0->next=(d1->next)? d1->next:d2->next;
        curr1->next=d2->next;
        curr2->next=NULL;
        Node *nhead=d0->next;
        delete d0;
        delete d1;
        delete d2;
        return nhead;
    }
