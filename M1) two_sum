brute force
vector<int> twoSum(vector<int>& nums, int target) {
       vector<int>index; 
       for(int i=0;i<nums.size();i++){
            for(int j=i+1;j<nums.size();j++){
                if(nums[i]+nums[j]==target){
                    index.push_back(i);
                    index.push_back(j);
                    break;
                }
            }
       }
       return index;
    }

op-2
 vector<int> twoSum(vector<int>& nums, int target) {
        vector<int>index;
        vector<pair<int,int>>dup;
        for(int i=0;i<nums.size();i++){
            dup.push_back(make_pair(nums[i],i));
        }
        sort(dup.begin(),dup.end(),[](pair<int,int>p1,pair<int,int>p2){
            return p1.first<p2.first;
        });
        int start=0;
        int end=nums.size()-1;
        while(start<end){
            if((dup[start].first + dup[end].first) == target){
                index.push_back(dup[start].second);
                index.push_back(dup[end].second);
                break;
            }else if((dup[start].first + dup[end].first) < target ){
                start++;
            }else{
                end--;
            }
        }
        return index;
    }


op-3
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map <int,int> m;
        vector<int>index;
        for(int i=0;i<nums.size();i++){
            if(m.count(target-nums[i])){
                index.push_back(i);
                index.push_back(m[target-nums[i]]);
                break;
            }else{
                m[nums[i]]=i;
            }
        }
        return index;
    }
};
