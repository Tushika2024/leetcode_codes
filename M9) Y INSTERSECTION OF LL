BRUTE- TC=O(2*(M+N)) SC=O(1)
int size(ListNode *head){
        int count=0;
        ListNode *temp=head;
        while(temp !=NULL){
            count++;
            temp=temp->next;
        }
        return count;
    }
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if(headA==NULL || headB==NULL){
            return NULL;
        }
        int ma=size(headA);
        int mb=size(headB);
        int diff=abs(ma-mb);
        ListNode *tempa=headA;
        ListNode *tempb=headB;
        for(int i=0;i<diff;i++){
            if(ma>mb){
                tempa=tempa->next;
            }else{
                tempb=tempb->next;
            }
        }
        while(tempa !=NULL && tempb!=NULL){
            if(tempa==tempb){
                return(tempa);
            }
            tempa=tempa->next;
            tempb=tempb->next;
        }
        return NULL;
    }

OPTIMAL-  TC=O(M+N) SC=O(1)
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if(headA==NULL || headB==NULL){
            return NULL;
        }
        ListNode *tempa=headA;
        ListNode *tempb=headB;
        while(tempa!=tempb){
            tempa=tempa->next;
            tempb=tempb->next;
            if(tempa==tempb) return tempa;
            if(tempa==NULL) tempa=headB;
            if(tempb==NULL) tempb=headA;
        }
       return tempa;
    }
