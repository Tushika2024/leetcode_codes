BRUTE- TC=O(3N)  SC=O(1)
  Node *reverse(Node *head){
        Node *prev=NULL;
        Node *curr=head;
        while(curr!=NULL){
            Node *next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
        }
        return prev;
    }
    Node* addOne(Node* head) {
       head=reverse(head);
       Node *temp=head;
       int carry=1;
       while(temp!=NULL){
           int sum=carry+temp->data;
           if(sum<10){
               temp->data=sum;
               carry=0;
           }else{
               temp->data=0;
               carry=1;
           }
           temp=temp->next;
       }
    
    head=reverse(head);
    if(carry){
        Node *nnode=new Node(1);
        nnode->next=head;
        head=nnode;
        return head;
    }
    return head;
    }
OPTIMAL-   TC=O(N) SC=O(1)
int add(Node *temp){
        if(temp==NULL){
            return 1 ;
        }
        int val=add(temp->next)+temp->data;
        if(val>=10){
            temp->data=0;
            return 1;
        }else{
            temp->data=val;
            return 0;
        }
        
    }
    Node* addOne(Node* head) {
       if(add(head)){
           Node *nnode=new Node(1);
           nnode->next=head;
           head=nnode;
       }
       return head;
    }
