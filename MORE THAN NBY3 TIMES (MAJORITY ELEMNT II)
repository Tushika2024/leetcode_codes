BRUTE- TC(ON2)
vector<int> majorityElement(vector<int>& nums) {
            vector<int>ans;
            for(int i=0;i<nums.size();i++){
                if(ans.size()==0 || nums[i]!=ans[0]){
                    int count=0;
                    for(int j=0;j<nums.size();j++){
                        if(nums[j]==nums[i]){
                            count++;
                        }
                    }
                    if(ans.size()==2) break;
                    if(count>nums.size()/3){
                        ans.push_back(nums[i]);
                    }
                }
            }
            return ans;
    }

BETTER- 
1) NORMAL HASH MAP TC=O(NLOGN +N) SC=O(N)
2)MODIFIED HASH MAP  TC=O(NLOGN) SC=O(N)
vector<int> majorityElement(vector<int>& nums) {
            map<int,int>mp;
            vector<int>ans;
            int min=nums.size()/3+1;
            for(int i=0;i<nums.size();i++){
                mp[nums[i]]++;
                if(mp[nums[i]]==min) ans.push_back(nums[i]);
                if(ans.size()==2) break;
            }
            return ans;
            
    }

OPTIMAL- MORRES VOTING ALGO  TC=O(2N)  SC=(1)
vector<int> majorityElement(vector<int>& nums) {
            vector<int>ans;
            int c1=0;
            int c2=0;
            int el1=INT_MIN;
            int el2=INT_MIN;
            int min=nums.size()/3+1;
            for(int i=0;i<nums.size();i++){
                if(c1==0 && nums[i]!=el2){
                    el1=nums[i];
                    c1=1;
                }
                else if(c2==0 && nums[i]!=el1){
                    el2=nums[i];
                    c2++;
                }
                else if(nums[i]==el1) c1++;
                else if(nums[i]==el2) c2++;
                else{
                    c1--;
                    c2--;
                }
            }
            int n1=0;
            int n2=0;
            for(int i=0;i<nums.size();i++){
                if(nums[i]==el1) n1++;
                else if(nums[i]==el2)  n2++;
            }
            if(n1>nums.size()/3) ans.push_back(el1);
            if(n2>nums.size()/3) ans.push_back(el2);
            return ans;
            
    }
