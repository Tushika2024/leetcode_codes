BRUTE-
  int maxLength(vector<int>& arr) {
        // code here                                                                              TC=O(N2) SC=O(N)
        int maxlen=0;
        for(int i=0;i<arr.size();i++){
            int sum=0;
            for(int j=i;j<arr.size();j++){
                sum+=arr[j];
                if(sum==0){
                    maxlen=max(maxlen,j-i+1);
                }
            }
        }
        return maxlen;
    }

BETTER-
int maxLength(vector<int>& arr) {
    
    // Calculate total sum of the array
    int maxSum = accumulate(arr.begin(), arr.end(), 0);
    
    // If total sum is zero, the entire array is a valid subarray
    if (maxSum == 0) return arr.size();
    
    int sum = maxSum;
    
    for (int i = 0; i < arr.size(); i++) {
        int st = i;
        int end = arr.size() - 1;
        
        while (st <= end) {
            if (sum == 0) {
                // Update max length if current window length is larger
                maxlen = max(maxlen, end - st + 1);
                break; // Found a subarray with sum zero, break inner loop
            } else {
                // If current window size is less than or equal to maxlen, no need to check further
                if ((end - st + 1) <= maxlen) break;
                sum -= arr[end];
                end--;
            }
        }
        
        // Reset sum for the next iteration by subtracting arr[st]
        sum = maxSum;
        sum -= arr[st];  //MODIFICATION
    }
    
    return maxlen;
}

OPTIMAL-                                                    TC=O(NLOGN) SC=O(N)
 int maxLength(vector<int>& arr) {
        int sum=0;
        int maxlen=0;
       map<int,int>mp;  //prefixsum,idx
       for(int i=0;i<arr.size();i++){
           sum+=arr[i];
           if(sum==0){
               maxlen=max(maxlen,i+1);
           }else{
               if(mp.find(sum)!=mp.end()){
                   maxlen=max(maxlen,i-mp[sum]);
               }else{
                   mp[sum]=i;
               }
           }
       }
       return maxlen;
    }
