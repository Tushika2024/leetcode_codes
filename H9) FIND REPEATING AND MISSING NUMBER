BRUTE FORCE-  TC=O(N2)
OPTIMAL I-
vector<int> findTwoElement(vector<int>& arr) {
        // code here
        
        long long s1=0;
        long long s2=0;
        for(int i=0;i<arr.size();i++){
            s1+=(long long)arr[i];
            s2+=((long long)arr[i]*(long long)arr[i]);
        }
        long long n=arr.size();
        long long s1n=(n*(n+1))/2;
        long long s2n=(n*(n+1)*(2*n+1))/6;
        long long r1=s1-s1n;
        long long r2=s2-s2n;
        r2=r2/r1;
        long long repeating=(r1+r2)/2;
        long long missing=r2-repeating;
        vector<int>ans={(int)repeating,(int)missing};
        return ans;
    }

OPTIMAL II-
 vector<int> findTwoElement(vector<int>& arr) {
        // code here
        vector<int>ans;
        long long x=0;
        for(int i=0;i<arr.size();i++){
            x=x^arr[i]^(i+1);
        }
        long long c=0;
        while(x!=0){
            if(x & 1) break;
            else{
                c++;
                x=x>>1;
            }
        }
        long long onex=0;
        long long zerox=0;
        for(int i=0;i<arr.size();i++){
            if((arr[i]>>c) & 1){
                 onex=onex^arr[i];
            }else{
                zerox=zerox^arr[i];
            }
            if((i+1>>c) & 1){
                 onex=onex^(i+1);
            }else{
                zerox=zerox^(i+1);
            }
            
        }
        int count=0;
        for(int i=0;i<arr.size();i++){
            if(arr[i]==onex) count++;
        }
        if(count==2){
            ans={(int)onex,(int)zerox};
        }else{
            ans={(int)zerox,(int)onex};
        }
        return ans;
    }
