BFA-                                                        TC=O(N2) SC=O(N)
vector<int> leaders(vector<int>& arr) {
        vector<int>leader;
        int n=arr.size();
        for(int i=0;i<n;i++){
            int lead=arr[i];
            int flag=0;
            for(int j=i+1;j<n;j++){
                if(arr[j]>arr[i]){
                    flag=1;
                }
            }
            if(!flag){
                leader.push_back(lead);
            }
        }
        return leader;
    }


STRIVER OPTIMAL-                                  BY TRACKING MAX ELEMENT FROM BACK AND COMPARING IT WITH CURRENT ELEMENT         TC=O(2N) SC=O(N)
vector<int> leaders(vector<int>& arr) {
        vector<int>leader;
        int n=arr.size();
        int maxel=INT_MIN;
        for(int i=n-1;i>=0;i--){
            if(arr[i]>maxel){
                leader.push_back(arr[i]);
            }
            maxel=max(arr[i],maxel);
        }
        reverse(leader.begin(),leader.end());
        return leader;
    }
MY OPTIMAL-                                                                                            
 vector<int> leaders(vector<int>& arr) {
        int n=arr.size();
        int j=n-1;
        int i=n-1;
        vector<int>leader;
        while(i>=0 && j>=0){
            if(i==j){
                leader.push_back(arr[i]);
                i--;
            }else{
                if(arr[i]>=arr[j]){
                    j--;
                }else{
                    i--;
                }
            }
        }
        reverse(leader.begin(),leader.end());
        return leader;
        
    }
