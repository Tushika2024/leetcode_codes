BRUTE-      TC=O(N3LOGN)  SC=O(2*NO OF UNIQUE TRIPLETS)
  vector<vector<int>> threeSum(vector<int>& nums) {
        set<vector<int>>st;
        for(int i=0;i<nums.size();i++){
            for(int j=i+1;j<nums.size();j++){
                for(int k=j+1;k<nums.size();k++){
                    if(nums[i]+nums[j]+nums[k]==0){
                        vector<int>ans={nums[i],nums[j],nums[k]};
                        sort(ans.begin(),ans.end());
                        st.insert(ans);
                    }
                }
            }
        }
        vector<vector<int>>fans(st.begin(),st.end());
        return fans; 
    }

BETTER-  TC=O(N2LOGN)   SC=O(2*NUMBER OF UNQIUE TRIPLETS)
  vector<vector<int>> threeSum(vector<int>& nums) {
       
        set<vector<int>>st;
        for(int i=0;i<nums.size();i++){
            set<int>hashset;
            for(int j=i+1;j<nums.size();j++){
                int req=-(nums[i]+nums[j]);
                if(hashset.find(req)!=hashset.end()){
                    vector<int>ans={nums[i],nums[j],req};
                    sort(ans.begin(),ans.end());
                    st.insert(ans);
                }
                hashset.insert(nums[j]);
            }
        }
         vector<vector<int>>fans(st.begin(),st.end());
         return fans;
    }
OPTIMAL  TC=O(NLOGN+N*N)  SC=O(NO OF UNIQUE TRIPLETS)
vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>>fans;
        sort(nums.begin(),nums.end());
        for(int i=0;i<nums.size();i++){
            if(i>0 && nums[i]==nums[i-1]) continue;
            int j=i+1;
            int k=nums.size()-1;
            while(j<k){
                int sum=nums[i]+nums[j]+nums[k];
                if(sum<0) j++;
                else if(sum>0) k--;
                else{
                    vector<int>ans={nums[i],nums[j],nums[k]};
                    fans.push_back(ans);
                    j++;
                    k--;
                    while(j<k && nums[j]==nums[j-1]) j++;
                    while(j<k && nums[k]==nums[k+1]) k--;
                }
            }
        }
        return fans;
    }
