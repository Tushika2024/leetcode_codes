BFA-                                                            TC=O(3N)
  int candy(vector<int>& ratings) {                             SC=O(2N)
        int sum=0;
        vector<int>left(ratings.size(),1);
        vector<int>right(ratings.size(),1);
        for(int i=1;i<ratings.size();i++){
            if(ratings[i]>ratings[i-1]){
                left[i]=left[i-1]+1;
            }
        }
        for(int i=ratings.size()-2;i>=0;i--){
            if(ratings[i]>ratings[i+1]){
                right[i]=right[i+1]+1;
            }
        }
        for(int i=0;i<left.size();i++){
            sum+=max(left[i],right[i]);
        }
        return sum;

BETTER-                                                        TC=O(2N)
  int candy(vector<int>& ratings) {                            SC=O(1)
        int sum=0;
        vector<int>left(ratings.size(),1);
        for(int i=1;i<ratings.size();i++){
            if(ratings[i]>ratings[i-1]){
                left[i]=left[i-1]+1;
            }
        }
        sum=max(1,left[ratings.size()-1]);
        int right=1;
        int curr=1;
        for(int i=ratings.size()-2;i>=0;i--){
            if(ratings[i]>ratings[i+1]){
                curr=right+1;
                right=curr;
            }else{
                curr=1;
            }
            sum+=max(left[i],curr);
        }
        return sum;
    }

OPTIMAL-                                                      TC=O(N)
   int candy(vector<int>& ratings) {                          SC=O(1)
        int sum=1;
        int i=1;
        while(i<ratings.size()){
            if(ratings[i]==ratings[i-1]){
                sum+=1;
                i++;
                continue;
            }
            int peak=1;
            while(i<ratings.size() && ratings[i]>ratings[i-1]){
                peak+=1;
                sum+=peak;
                i++;
            }
            int down=1;
            while(i<ratings.size() && ratings[i]<ratings[i-1]){
                sum+=down;
                down++;
                i++;
            }
            if(down>peak){
                sum+=(down-peak);
            }
        }
        return sum;
