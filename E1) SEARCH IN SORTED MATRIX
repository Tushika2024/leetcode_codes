BRUTE-
 bool searchMatrix(vector<vector<int>>& matrix, int target) {
            int rows=matrix.size();
            int cols=matrix[0].size();
            for(int i=0;i<rows;i++){
                for(int j=0;j<cols;j++){
                    if(matrix[i][j]==target) return true;
                }
            }
            return false;
    }

BETTER-
   bool bs(vector<int>row,int &target,int &cols){
        int st=0;
        int end=cols-1;
        while(st<=end){
            int mid=st+((end-st)/2);
            if(row[mid]==target) return true;
            else if(row[mid]>target) end=mid-1;
            else st=mid+1;
        }
        return false;
    }
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
            int rows=matrix.size();
            int cols=matrix[0].size();
            for(int i=0;i<rows;i++){
                bool ans=bs(matrix[i],target,cols);   //CAN BE OPTIMISED TO ONLY ONE TIME BS BY CHECKING TARGET BW FIRST AND LAST ELEMNT 
                if(ans) return ans;
            }
            return false;
    }

MY OPTIMAL-TC=O(LOG(M*N))
bool searchMatrix(vector<vector<int>>& matrix, int target) {
            int rows=matrix.size();
            int cols=matrix[0].size();
            int sr=0;
            int sc=cols-1;
            int el=matrix[sr][sc];
            while(sr<rows && sc>=0){
                if(el==target) return true;
                else if(el<target){
                    sr++;
                    if(sr<rows) el=matrix[sr][sc];
                }else{
                    sc--;
                    if(sc>=0) el=matrix[sr][sc];
                }
            }
            return false;
    }

STRIVER OPTIMAL -TC=O(LOG(M*N))
bool searchMatrix(vector<vector<int>>& matrix, int target) {
            int rows=matrix.size();
            int cols=matrix[0].size();
            int st=0;
            int end=rows * cols -1;
            while(st<=end){
                int mid=st+((end-st)/2);
                int cr=mid/cols;
                int cc=mid%cols;
                if(matrix[cr][cc]==target) return true;
                else if(matrix[cr][cc]>target) end=mid-1;
                else st=mid+1;
            }
            return false;

    }
