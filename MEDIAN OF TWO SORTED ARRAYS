BETTER-
void merge(vector<int>&nums1,vector<int>&nums2,double &ans){
        int ts=nums1.size()+ nums2.size();
        int idx=-1;
        int i=0;
        int j=0;
        while(i<nums1.size() && j<nums2.size()){
            if(nums1[i]<nums2[j]){
                idx++;
                if(ts%2 && idx==ts/2){
                    ans=nums1[i];
                    return;
                }
                if((ts%2==0) && ((idx==ts/2) || (idx==ts/2-1))){
                    ans+=nums1[i];
                }
                i++;
            }else{
                idx++;
                if(ts%2 && idx==ts/2){
                    ans=nums2[j];
                    return;
                }
                if((ts%2==0) && ((idx==ts/2) || (idx==ts/2-1))){
                    ans+=nums2[j];
                }
                j++;
            }
        }
        while(i<nums1.size()){
            idx++;
                if(ts%2 && idx==ts/2){
                    ans=nums1[i];
                    return ;
                }
                if((ts%2==0) && ((idx==ts/2) || (idx==ts/2-1))){
                    ans+=nums1[i];
                }
            i++;
        }
        while(j<nums2.size()){
            
            idx++;
                if(ts%2 && idx==ts/2){
                    ans=nums2[j];
                    return ;
                }
                if((ts%2==0) && ((idx==ts/2) || (idx==ts/2-1))){
                    ans+=nums2[j];
                }
            j++;
        }
        if(ts%2 ==0)
        ans/=2.0;
        return;
    }
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        double ans=0;
        merge(nums1,nums2,ans);
        return ans;
    }
};

OPTIMAL-
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n=nums1.size()+nums2.size();
        int left=(nums1.size()+nums2.size()+1)/2;
        if(nums2.size()<nums1.size()){
            return findMedianSortedArrays(nums2,nums1);
        }
        int st=0;
        int end=nums1.size();
        while(st<=end){
            int mid1=st+((end-st)/2);
            int mid2=left-mid1;
            int l1=INT_MIN,l2=INT_MIN;
            int r1=INT_MAX,r2=INT_MAX;
            if(mid1<nums1.size()) r1=nums1[mid1];
            if(mid2<nums2.size()) r2=nums2[mid2];
            if(mid1-1 >=0) l1=nums1[mid1-1];
            if(mid2-1>=0) l2=nums2[mid2-1];
            if(l1<=r2 && l2<=r1){
                if(n%2){
                    return (double)max(l1,l2);
                }
                return ((double)max(l1,l2)+(double)min(r1,r2))/2.0;
            }else if(l1>r2) end=mid1-1;
            else st=mid1+1;
        }
        return 0.0;
    }
