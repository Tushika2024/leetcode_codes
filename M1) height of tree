OPTIMAL-  RECURSIVE
int maxDepth(TreeNode* root) {                       TC=O(N)
        if(root==NULL){                              SC=O(HEIGHT)   AVG/BEST CASE=O(LOG N) WORST CASE=O(N)
            return 0;
        }
        int ldepth=maxDepth(root->left);
        int rdepth=maxDepth(root->right);
        return max(ldepth,rdepth)+1;  
    }


LEVEL ORDER_
int maxDepth(TreeNode* root) {
        queue<TreeNode* >q;
        int c=0;
        q.push(root);
        while(!q.empty()){                        TC=0(N)
            int size=q.size();                    SC=O(N)
            for(int i=0;i<size;i++){
                TreeNode *el=q.front();
                if(el->left !=NULL){
                    q.push(el->left);
                }
                if(el->right !=NULL){
                    q.push(el->right);
                }
                q.pop();
            }
            c++;
        }
        return c;
    }
