BFA- TC=O(2 ARISE TO POWER N *KLOGN)
void cs(vector<int>&candidates,set<vector<int>>&fans,
            vector<int>ans,int idx,int target,int sum){
                if(idx==candidates.size()){
                    if(sum==target){
                        sort(ans.begin(),ans.end());
                        fans.insert(ans);
                    }
                    return;
                }
                if(sum==target){
                    sort(ans.begin(),ans.end());
                    fans.insert(ans);
                    return;
                }
                if(sum>target) return;
                ans.push_back(candidates[idx]);
                cs(candidates,fans,ans,idx+1,target,sum+candidates[idx]);
                ans.pop_back();
                cs(candidates,fans,ans,idx+1,target,sum);
            }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        set<vector<int>>fans;
        vector<int>ans;
        cs(candidates,fans,ans,0,target,0);
        vector<vector<int>>nans;
        for(auto it:fans){
            nans.push_back(it);
        }
        return nans;
    }
};
OPTIMAL- TC=O(2 POWER N *K) SC=O(K*X)
void cs(vector<int>&candidates,vector<int>ans,int idx,
            int target,vector<vector<int>>&fans){
                 if(idx>=candidates.size()){
                    if(target==0) fans.push_back(ans);
                    return;
                }
                if(target==0){
                    fans.push_back(ans);
                    return;
                }
                for(int i=idx;i<candidates.size();i++){
                    if(i>idx && candidates[i]==candidates[i-1]) continue;
                    if(candidates[i]>target) return;
                    ans.push_back(candidates[i]);
                    cs(candidates,ans,i+1,target-candidates[i],fans);
                    ans.pop_back();
                }
               
            }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
        vector<vector<int>>fans;
        vector<int>ans;
        cs(candidates,ans,0,target,fans);
        return fans;
    }
