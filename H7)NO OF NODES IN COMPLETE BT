OPTIMAL-                                                                    TC=O(LOGN)*(LOGN)
    int findLeftHeight(TreeNode *root){                                      SC=O(LOGN=H)
        int height=0;
        while(root){
            height++;
            root=root->left;
        }
        return height;
    }
    int findRightHeight(TreeNode *root){
        int height=0;
        while(root){
            height++;
            root=root->right;
        }
        return height;
    }
    int countNodes(TreeNode* root) {
        if(root==NULL){
            return 0;
        }
        int lh=findLeftHeight(root);
        int rh=findRightHeight(root);
        if(lh==rh){
            return (1<<lh)-1;
        }
        return 1+countNodes(root->left)+countNodes(root->right);;
    }


 void count(TreeNode *root,int &ans){                          TC=O(N) SC=O(H)
        if(root==NULL){
            return;
        }
        ans++;
        count(root->left,ans);
        count(root->right,ans);
        return;
    }
    int countNodes(TreeNode* root) {
       int ans=0;
       count(root,ans);
       return ans;
    }
int countNodes(TreeNode* root) {                                TC=O(N) SC=O(N)
        if(root==NULL){
            return 0;
        }
        queue<TreeNode*>q;
        int ans=0;
        q.push(root);
        while(!q.empty()){
            int csize=q.size();
            ans+=csize;
            for(int i=0;i<csize;i++){
                TreeNode *cnode=q.front();
                q.pop();
                if(cnode->left!=NULL){
                    q.push(cnode->left);
                }
                if(cnode->right!=NULL){
                    q.push(cnode->right);
                }
            }
        }
        return ans;
    }

