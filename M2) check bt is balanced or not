BFA-
int height(TreeNode *root){
        if(root==NULL){
            return 0;
        }
        int lh=height(root->left);
        int rh=height(root->right);
        return max(lh,rh)+1;
    }
    bool isBalanced(TreeNode* root) {
        if(root==NULL){
            return true;
        }
        bool lb=isBalanced(root->left);
        bool rb=isBalanced(root->right);
        if(lb==true && rb==true){
            int lh=height(root->left);
            int rh=height(root->right);
            if(lh-rh>=-1 && lh-rh<=1){
                return true;
            }else{
                return false;
            }
        }
        return false;
    }

OPTIMAL-
int checkHeight(TreeNode *root){
        if(root==NULL){
            return 0;
        }
        int lh=checkHeight(root->left);
        if(lh==-1){
            return -1;
        }
        int rh=checkHeight(root->right);
        if(rh==-1){
            return -1;
        }
        if(abs(lh-rh)>1){
            return -1;
        }
        return max(lh,rh)+1;
    }
    bool isBalanced(TreeNode* root) {
        int ans=checkHeight(root);
        if(ans==-1){
            return false;
        }
        return true;
    }
