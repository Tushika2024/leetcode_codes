vector<vector<int>> fourSum(vector<int>& nums, int target) {
        set<vector<int>>st;
        for(int i=0;i<nums.size();i++){
            for(int j=i+1;j<nums.size();j++){
                for(int k=j+1;k<nums.size();k++){
                    for(int l=k+1;l<nums.size();l++){
                        long long sum=nums[i]+nums[j];
                        sum+=nums[k];
                        sum+=nums[l];
                        if(sum==target){
                            vector<int>ans={nums[i],nums[j],nums[k],nums[l]};
                            sort(ans.begin(),ans.end());
                            st.insert(ans);
                        }
                    }
                }
            }
        }
        vector<vector<int>>fans(st.begin(),st.end());
        return fans;
    }

BETTER-
  vector<vector<int>> fourSum(vector<int>& nums, int target) {
        set<vector<int>>st;
        for(int i=0;i<nums.size();i++){
            for(int j=i+1;j<nums.size();j++){
                set<long long>hashset;
                for(int k=j+1;k<nums.size();k++){
                    long long sum=nums[i]+nums[j];
                    sum+=nums[k];
                    long long req=target-(sum);
                    if(hashset.find(req)!=hashset.end()){
                        vector<int>ans={nums[i],nums[j],nums[k],(int)req};
                        sort(ans.begin(),ans.end());
                        st.insert(ans);
                    }
                    hashset.insert(nums[k]);
                }
                
                
            }
        }
        vector<vector<int>>fans(st.begin(),st.end());
        return fans;
    }

OPTIMAL-
vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>>fans;
        sort(nums.begin(),nums.end());
        for(int i=0;i<nums.size();i++){
            if(i>0 && nums[i]==nums[i-1]) continue;
            for(int j=i+1;j<nums.size();j++){
                if(j!=i+1 && nums[j]==nums[j-1]) continue;
                int k=j+1;
                int l=nums.size()-1;
                while(k<l){
                    long long sum=nums[i]+nums[j];
                    sum+=nums[k];
                    sum+=nums[l];
                    if(sum<target) k++;
                    else if(sum>target)  l--;
                    else{
                        vector<int>ans={nums[i],nums[j],nums[k],nums[l]};
                        fans.push_back(ans);
                        k++;
                        l--;
                        while(k<l && nums[k]==nums[k-1]) k++;
                        while(k<l &&  nums[l]==nums[l+1]) l--;
                    }
                }
            }
        }
        return fans;
    }
