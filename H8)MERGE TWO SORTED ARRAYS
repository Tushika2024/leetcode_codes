BRUTE-
void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {    TC=O(N+M)+O(N+M)     SC=O(N+M)
            int i=0;
            int j=0;
            vector<int>ans;
            while(i<m && j<n){
                if(nums1[i]<=nums2[j]){
                    ans.push_back(nums1[i]);
                    i++;
                }else{
                    ans.push_back(nums2[j]);
                    j++;
                }
            }
            while(i<m){
                ans.push_back(nums1[i]);
                i++;
            }
            while(j<n){
                ans.push_back(nums2[j]);
                j++;
            }
            for(int i=0;i<ans.size();i++){
                nums1[i]=ans[i];
            }

BETTER- TC=O(N+(N+M)LOG(N+M))   SC=O(1)
void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
           int i=m;
           int j=0;
           while(j<n){
                nums1[i]=nums2[j];
                i++;
                j++;
           }
           sort(nums1.begin(),nums1.end());
    }

OPTIMAL- TC=O(M+N)    SC=O(1)
void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
           int i=m-1;
           int p=nums1.size()-1;
           int j=n-1;
           while(i>=0 && j>=0){
            if(nums1[i]>=nums2[j]){
                swap(nums1[i],nums1[p]);
                i--;
                p--;
            }else{
                nums1[p]=nums2[j];
                p--;
                j--;
            }
           }
           while(j>=0){
            nums1[p]=nums2[j];
            j--;
            p--;
           }
    }
    }
