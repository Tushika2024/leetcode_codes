BFA-
int missingNumber(vector<int>& nums) {
        int n=nums.size();
        for(int i=0;i<=n;i++){
            int flag=0;
            for(int j=0;j<n;j++){
                if(i==nums[j]){
                    flag=1;
                }
            }
            if(flag==0){
                return i;
            }
        }
        return -1;
    }

    BETTER-
    int missingNumber(vector<int>& nums) {
        int n=nums.size();
        unordered_map<int,int>mp;
        for(int i=0;i<n;i++){
            mp[nums[i]]=1;
        }
        for(int i=0;i<=n;i++){
            if(!mp.count(i)){
                return i;
            }
        }
        return -1;
    }

    
OPTIMISED-
int missingNumber(vector<int>& nums) {
        int xor1=0;                                                             
        int xor2=0;
        int n=nums.size();
        for(int i=0;i<n;i++){
            xor2=xor2^nums[i];
            xor1=xor1^i;
        }
        return xor1^n^xor2;
    }

    OR DUE TO OVVERFLOW PROBLEM AVOIDED
    int missingNumber(vector<int>& nums) {
        int n=nums.size();
        long long osum=(n*(n+1))/2;
        long long rsum=accumulate(nums.begin(),nums.end(),0);
        return (int)osum-rsum;
    }
